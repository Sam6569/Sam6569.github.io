name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Step 1: Build and test Node.js app
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  # Step 2: Build Docker image and push to Docker Hub
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:latest

  # Step 3: Deploy to staging EC2
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Start SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add staging server to known hosts
        run: ssh-keyscan -H 13.53.49.194 >> ~/.ssh/known_hosts

      - name: Deploy on staging server
        run: |
          ssh ec2-user@13.53.49.194 "
            docker pull ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:latest &&
            docker stop app || true &&
            docker rm app || true &&
            docker run -d --name app -p 80:3000 ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:latest
          "
